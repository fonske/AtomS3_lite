substitutions:
  name: co2
  friendly_name: Co2
  device_description: "Esphome component for Co2 level detection"
  timezone: "Europe/Amsterdam"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
 
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${name}
    password: "configesp"

 
captive_portal:

# Sync time with sntp server
time:
  - platform: sntp
    id: sntp_time
    timezone: ${timezone}

# Enable logging
logger:
  baud_rate: 0
  level: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 0s
 
ota:

web_server:
  port: 80

i2c:
  - id: bus_a
    sda: GPIO2
    scl: GPIO1

sensor:
  # M5stack CO2L Unit SCD41 - https://docs.m5stack.com/en/unit/CO2L
  - platform: scd4x
    co2:
      name: Kamer co2
      id: room_co2
      on_value_range:
        - above: 1200.0
          below: 6000.0
          then:
           - light.turn_on:
                id: led
                brightness: !lambda |-
                  // output value must be in range 0 - 1.0
                  return id(led_brightness).state / 100.0;
                red: 100%
                green: 0%
                blue: 0%

        - above: 801.0
          below: 1199.0
          then:
            - light.turn_on:
                id: led
                brightness: !lambda |-
                  // output value must be in range 0 - 1.0
                  return id(led_brightness).state / 100.0;
                red: 0%
                green: 0%
                blue: 100%          

        - above: 390.0
          below: 800.0
          then:
            - light.turn_on:
                id: led
                brightness: !lambda |-
                  // output value must be in range 0 - 1.0
                  return id(led_brightness).state / 100.0;
                red: 0%
                green: 100%
                blue: 0%
    humidity:
      name: Kamer vochtigheid
      id: room_rh
    temperature:
      name: Kamer temperatuur
      id: room_temp
#    temperature_offset: "4.2Â°C"
#    measurement_mode: low_power_periodic
    i2c_id: bus_a
    address: 0x62
    update_interval: 30s



# Diagnostics wifi and uptime      
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    id: wifi_signal_db
    name: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic
    internal: True

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    id: wifi_signal_db_percent
    name: Wifi signaal
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic

  - platform: uptime
    id: co2_uptime
    name: Co2 Uptime
    unit_of_measurement: dagen
    update_interval: 3600s
    accuracy_decimals: 1
    filters:
      - multiply: 0.000011574

# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    id: co2_version
    name: Co2 Versie
    hide_timestamp: true

  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: Wifi info
      icon: mdi:ip-network

light:
#G35=RGB WS2812C-2020
  - platform: esp32_rmt_led_strip
    name: Led
    id: led
    rgb_order: GRB
    pin: 35
    num_leds: 4
#    brightness: 0.7
    # RMT 0 channels will be occupied by IR
    rmt_channel: 1
    chipset: ws2812
    restore_mode: ALWAYS_OFF
#    internal: True

#G41=Button
binary_sensor:
  - platform: gpio
    name: Button
    id: button
    pin:
      number: GPIO41
      inverted: true
      mode:
        input: true
        pullup: true
    internal: True
    filters:
      - delayed_off: 10ms
    # Toggle the switch when the pushbutton is pressed
    on_press:
      then:
        - switch.toggle: co2_switch

switch:
  - platform: template
    id: co2_switch
    name: Led schakelaar
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON 
    lambda: return id(co2_switch).state;
    turn_on_action:
      - light.turn_on:
          id: led
          brightness: !lambda |-
            // output value must be in range 0 - 1.0
            return id(led_brightness).state / 100.0;
    turn_off_action:
      - light.turn_off:
          id: led

# imput numbers as boxes for setting the dimensions of the tank and level alarm.
number:

    ## Set led brightness
  - platform: template
    id: led_brightness
    name: led_brightness
    icon: mdi:toggle-switch-variant
    optimistic: true
    mode: slider
    step: 10
    entity_category: config
    min_value: 0
    max_value: 100
    initial_value: 70
    restore_value: yes
    unit_of_measurement: "%"
    on_value:
      then:
        - if:
            condition:
              - light.is_on: led
            then:
            - light.turn_on:
                id: led
                brightness: !lambda |-
                  // output value must be in range 0 - 1.0
                  return id(led_brightness).state / 100.0;
